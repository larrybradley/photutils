--- a/epsf.py
+++ b/epsf.py
@@
-from photutils.psf.image_models import ImagePSF, _LegacyEPSFModel
+from photutils.psf.image_models import ImagePSF
@@
     def __call__(self, epsf, stars):
         """
         Fit an ePSF model to stars.
@@
         if len(stars) == 0:
             return stars

-        if not isinstance(epsf, ImagePSF):
-            msg = 'The input epsf must be an ImagePSF'
-            raise TypeError(msg)
-
-        epsf = _LegacyEPSFModel(epsf.data, flux=epsf.flux, x_0=epsf.x_0,
-                                y_0=epsf.y_0, oversampling=epsf.oversampling,
-                                fill_value=epsf.fill_value)
-
-        # make a copy of the input ePSF
-        epsf = epsf.copy()
+        if not isinstance(epsf, ImagePSF):
+            msg = 'The input epsf must be an ImagePSF'
+            raise TypeError(msg)
+
+        # make a copy of the input ePSF (copy only parameters, keep data ref)
+        epsf = epsf.copy()
@@
     def _create_initial_epsf(self, stars):
         """
-        Create an initial `_LegacyEPSFModel` object.
+        Create an initial `ImagePSF` object.
@@
         xcenter = stars._max_shape[0] / 2.0
         ycenter = stars._max_shape[1] / 2.0

-        return _LegacyEPSFModel(data=data, origin=(xcenter, ycenter),
-                                oversampling=oversampling,
-                                norm_radius=norm_radius)
+        from photutils.psf.image_models import ImagePSF
+        # origin as center of data array in (x, y) order
+        origin_xy = ((data.shape[1] - 1) / 2.0, (data.shape[0] - 1) / 2.0)
+        epsf = ImagePSF(data=data, origin=origin_xy, oversampling=oversampling,
+                        fill_value=0.0)
+        # preserve norm_radius for backward compatibility
+        epsf._norm_radius = norm_radius
+        return epsf
@@
-        stardata = (star._data_values_normalized
-                    - epsf.evaluate(x=x, y=y, flux=1.0, x_0=0.0, y_0=0.0))
+        stardata = (star._data_values_normalized
+                    - epsf.evaluate(x=star._xidx_centered, y=star._yidx_centered,
+                                    flux=1.0, x_0=0.0, y_0=0.0))

